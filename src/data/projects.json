[
  {
    "id": "minecraft-in-racket",
    "repository": "https://github.com/jaron-cui/Minecraft-in-Racket",
    "title": "Minecraft in Racket",
    "date": "2021-09-01",
    "status": "COMPLETED",
    "technologies": [
      "Racket (Intermediate Student Language)"
    ],
    "features": [
      "3D vector graphics",
      "Infinite procedurally-generated terrain",
      "Breakable and placeable blocks",
      "Box-bounded collision and movement physics"
    ],
    "paragraphs": [
      "I started this project because I thought it would be interesting to implement a game suited to object-oriented programming in a heavily restricted functional programming language.",

      "Some of the notable differences between ISL and Java (the language that the original game is implemented in) are ISL's lack of mutation, classes, and static typing. On the other hand, ISL includes first-class functions.",

      "These distinctions meant that I did not have access to convenient data structures such as arrays, maps, and other constant-time access storage. So, in the process of designing the project, I had to implement immutable analogues. My replacement for Java's HashMap, for example, was tree structure bundled along with a comparison function, which could on average retrieve key/value pairs with a binary search."
    ],
    "video": "https://youtube.com/embed/n3Io4oBeCn0?rel=0"
  }, {
    "id": "worksheet-generator",
    "repository": "https://github.com/jaron-cui/MathWorksheetGenerator",
    "title": "Curricular Worksheet Generator",
    "date": "2021-08-20",
    "status": "COMPLETED",
    "technologies": ["Python", "LaTeX"],
    "features": [
      "Randomized problem generation in PDF format",
      "Integer, decimal, and fractional addition, multiplication, and exponents",
      "Answer key",
      "Increased academic achievement by younger sister",
      "Complaints from younger sister"
    ],
    "paragraphs": [
      "This worksheet generator is flexible and extendable. The process of adding new types of problems simply entails implementing a function which can produce randomized prompts and answers. Any number of these can be given to the worksheet generator, which itself will randomly choose one of these generators for each problem.",
      
      "The program uses LaTeX to handle formatting. Since I found the existing LaTeX packages for Python to be unintuitive, I designed my own utilities for handling LaTeX document creation. These utilities have both generalized methods for ubiquitous document elements, such as headers, page numbers, paragraphs, and alignment, but also the ability to include raw LaTeX script and packages.",

      "I have currently configured the program to generate math problems for the 6th grade level. I can add more types of problems and remove certain types as needed, and generate unlimited PDFs of unique worksheets without further modification."
    ]
  }, {
    "id": "mask-layout-generator",
    "title": "Photolithographic Mask Layout Generator",
    "date": "2021-06-24",
    "status": "COMPLETED",
    "technologies": ["Python", "KLayout"],
    "features": [
      "GDSII format",
      "Parameterizeable dimension constraints",
      "Numbered mask grid layout generation",
      "Multiple design variations within a single layout"
    ],
    "paragraphs": [
      "Over the summer of 2021, I joined a Binghamton University research project investigating a new type of nanoscale microphone. The project used the Cornell Nanoscale Facility in the prototyping and testing stage of the process, with the primary fabrication methods including photolithography, material deposition, and etching.",

      "Photolithography is a process that uses ultraviolet light and patterned masks on silicon wafers to produce nanostructures. A mask is a glass plane that has been processed to have transparent and opaque sections, a scaled-up version of the desired pattern. By shining ultraviolet light through a lens onto a prepared silicon wafer, sections of the surface are chemically stabilized and the wafer can be moved to a chemical bath which removes layers from unexposed regions. The final result is a consistently reproducible silicon structure of a greatly reduced scale in relation to the original pattern mask.",

      "In order to create a photolithographic mask, we must first design a layout digitally. However, since many variants of the nanostructures are needed for thorough testing of the properties of the design, the team was repeatedly manually adjusting the vertices and dimensions. This was a tedious and time-consuming process, so I took the initiative to implement a program which could parameterize the design.",

      "This program allowed for adjustments to be made to the primary dimensions, such as lengths or quantities of features. Then, repeated sections and minor dimensions would be automatically recalculated and used to easily generate a new design layout.",

      "The program outputs files in the GDSII (Graphic Design System) format, a file format commonly used for integrated circuit design. However, one of my team members is currently working to extend the program to output CAD files which can be used to simulate the physical design prior to real-world fabrication."
    ]
  }, {
    "id": "rust-physics",
    "repository": "https://github.com/jaron-cui/rust-physics",
    "title": "Circular-Entity Physics Simulator",
    "date": "2022-03-06",
    "status": "COMPLETED",
    "technologies": ["Rust", "Nannou"],
    "clip": "https://drive.google.com/uc?export=download&id=14uJ6_58N_Oi3TRHTWGL-zIMZR6YP8dl8",
    "features": [
      "Algebraically-resolved collisions",
      "Gravity",
      "Unlimited entity cap",
      "Animated rendering"
    ],
    "paragraphs": [
      "I have always been intrigued by computer simulation. Previously, I've explored rectangular-bounded collisions with a variety of resolution methods. Here, I wanted to make a 'perfectly accurate' simulation free of the bugs commonly seen in physics simulations, such as clipping or unintuitive interactions.",

      "=Typical Flaws of Simulated Collisions=",
      
      "The simplest form of collision resolution subsumes incrementing the positions of objects, and then applying deflective collision forces on intersecting pairs. However, there are several unwanted behaviors that can emerge from this approach.",
      
      "First, when the objects involved in what should be imminent collisions have a high relative velocity in comparison to their thickness, the collision may be missed altogether when there is no intersection during the frames preceding or following the hypothetical moment of collision.",

      "Second, even during properly detected collisions, there is inaccuracy in the positions of the objects after collision, since in reality, most collisions do not occur exactly between two frames. If we simulated collisions continuously, they would occur at some point during a given frame.",

      "Third, when a body collides several times between two frames, only the first collision will be accounted for.",

      "=Addressing These Flaws=",

      "The primary goal of this project is to avoid all of these inaccuracies and bugs. I selected circles over rectangles because of their directional symmetry. They would also serve well in a potential future project of simulating soft bodies composed of many rigid subunits.",

      "To prevent the first and second issues, I decided to solve collisions algebraically. So, we can calculate the specific proportion of the frame at which a collision occurs. With this information, we can do frame-by-frame timesteps, but pretend as though we have infinite timesteps - we 'apply' the collision forces at the moment of impact and then increment the positions of the bodies accurate to the remaining time left in the frame.",

      "For the third issue, we can run multiple collision checks per frame. In order to maximize the efficiency of this operation while ensuring all subframe collisions are accounted for, we only check for collisions for bodies that collided in the previous check. We repeat the check and resolution cycle until a check involves 0 bodies. (We should also add checks to safeguard against stable cycles of collisions, such as if a body is stuck oscillating between two other colliders)",

      "With this line of deliberation, I am confident, as of now, that I have addressed all sources of simulation mistakes for 2D collisions."
    ]
  }, {
    "id": "frog-games",
    "repository": "https://github.com/jaron-cui/frames-backend",
    "title": "Multiplayer Game Site",
    "date": "2022-04-03",
    "status": "ON_HOLD",
    "technologies": ["TypeScript", "React", "Spring Boot", "Websocket"],
    "features": [
      "Real-time multiplayer games with friends",
      "REST and websocket frontend-backend communication",
      "Polished in-game animations",
      "Player statistics"
    ],
    "paragraphs": [
      "It is not uncommon for my friends and I to want to play short multiplayer games with each other. However, sometimes there are no good options for particular games online - they might demand money or be covered in ads, if they exist at all. The only free option we could find online for Mancala is text-based!",
      "So, fine, I'll do it myself!",
      "We'll make Mancala, and checkers, minesweeper but competitive, connect X=?, and whatever else we feel like playing!",
      "Coming soon... eventually!"
    ]
  }, {
    "id": "image-editor",
    "repository": "https://github.com/jaron-cui/CS3500-HW5",
    "title": "Image Editor Application",
    "date": "2021-06-07",
    "status": "COMPLETED",
    "technologies": ["Java", "Swing"],
    "features": [
      "Command-line operation",
      "GUI mode",
      "Scriptable operations",
      "Transparency",
      "Filter and linear image transformations",
      "Resizing",
      "Image layers",
      "Project save and load",
      "File export"
    ],
    "paragraphs": [
      "An assignment from the course CS3500: 'Object-Oriented Design'.",
      
      "This image editor has both a CLI and a GUI mode, both of which grant the user access to all image and project operations. These include image scaling and layering, color manipulation including grayscaling, saturation/brightness adjustment, and themed color scales. There are also filter operations such as sharpening and blurring.",

      "Since we had already implemented a CLI, we also added scripting capabilities for which scripts can be stored in text files and executed. Repetitive or complex actions can thus be recorded for straightforward reuse."
    ]
  }, {
    "id": "maze-generator",
    "title": "Maze Generator and Visualizer",
    "date": "2021-04-15",
    "status": "COMPLETED",
    "technologies": ["Java"],
    "clip": "https://drive.google.com/uc?export=download&id=1jYfMvI46QrOYmRXe764Nlq3pmSBrfTjS",
    "features": [
      "Orthogonal maze generation",
      "Hexagonal maze generation",
      "Start/end distance color gradient option",
      "Breadth-first and depth-first maze solver",
      "Interactable game mode",
      "Dynamic directional controls with angular tolerance"
    ],
    "paragraphs": [
      "An assignment from the course CS2510: 'Fundamentals of Computer Science II (Accelerated)'.",

      "Mazes can either be composed of traditional square segments, where corridors and turns are orthogonal, or with hexagonal tiles resembling a beehive where each node could connect to a maximum of 6 others. We generate a maze with a single correct path using Prim's algorithm.",

      "Maze generation and automatic solving can both be animated step-by-step. In the case of manual solving, where the user controls a 'player' that sits on a particular node, navigation can be done with the WEADZX keys (note that these keys form a hexagon around the 'S' key, which correspond to their intending direction of movement).",

      "When the user presses one of the movement keys, then if there is an open pathway within an angular threshhold of the intended direction, they will move to the node at the end of that pathway. This allows the same control scheme to be compatible with both the square and hexagon-tiled mazes, as well as variations such as ones that give a randomized offset to each node."
    ]
  }, {
    "id": "seam-carver",
    "title": "Image Seam Carver",
    "date": "2021-03-24",
    "status": "COMPLETED",
    "technologies": ["Java"],
    "clip": "https://drive.google.com/uc?export=download&id=1rM-qhn94SdljSHCZszBRe20AeS5wjC2P",
    "features": [
      "Vertical and horizontal seam carving",
      "Image import/export",
      "Animated seam carving",
      "Carve pausing",
      "Carve undo/reversal"
    ],
    "paragraphs": [
      "An assignment from the course CS2510: 'Fundamentals of Computer Science II (Accelerated)'.",

      "A simple image seam-carving application for scaling down images in a way that attempts to preserve the most important features."
    ]
  }, {
    "id": "get-rect",
    "title": "get_rect(): 2D Sandbox Duel!",
    "date": "1600-01-01",
    "status": "COMPLETED",
    "technologies": ["Python", "pygame"],
    "features": [
      "2D box-bounded physics",
      "Destructible grid-based terrain",
      "Animated entities",
      "Ranged and melee weapons",
      "Explosions!",
      "Sound effects!",
      "Logically following, fireworks and dynamite!"
    ],
    "paragraphs": [
      "My first game development project in Python, using pygame for the main game loop logic and custom implementations for all game mechanics.",

      "The name of the game comes from an essential function included with pygame, 'get_rect()', which retrieves the bounding box of a rendered image. I thought this would be a fun reference to the then-popular taunt, 'Get wrecked!'.",

      "This was one of my earlier experiments with 2D physics, toying with simple box-bounded intersection collisions. All entities in the game have a mass and velocity, and can therefore be knocked around by players and explosions, which I think makes the game quite enjoyable even without the PVP aspect."
    ]
  }, {
    "id": "allchemical",
    "title": "Allchemical",
    "date": "2022-07-17",
    "status": "ACTIVE",
    "technologies": ["C++", "SFML"],
    "clip": "https://drive.google.com/uc?export=download&id=1ReWX4WrXyg7f0TGS8U7dbxFbKpKYp-zA",
    "features": [
      "Spring physics!"
    ],
    "paragraphs": [
      "An exploratory experiment that borrows basic physics logic from my previous project in Rust, the eventual goal being the simulation of larger-scale materials that may be liquids, gases, or solids which will be able to 'react' to form different compounds.",

      "An important concept in this simulation will be 'bonds', which I'm implementing to behave akin to physical springs attached at points on atomic surfaces. Since I much prefer experimenting to reading dense articles explaining physics, I've simply taken Hooke's law of springs where F = -kx and applied it to the stretching, bending, and deviant rotation of imaginary 'springs' to achieve a visually appealing result. I'm not certain if this application is accurate to the behavior of real springs, though.",

      "You can see the very early progress I've achieved above, where the GREEN 'atoms' have their rotational axes indicated with RED lines extending from their centers, and bonded atom pairs are connected with BLUE lines.",
      
      "Eventually, the presence of, absense of, and the properties of these bonds will distinguish the physical phases of materials. Other than this, I will also be able to use these bonds to simulate threads and soft bodies."
    ]
  }, {
    "id": "finite-state-automata",
    "repository": "https://github.com/jaron-cui/finite-state-automata",
    "title": "State Machine Simulator",
    "date": "2022-07-24",
    "status": "ACTIVE",
    "technologies": ["Python", "Graphviz"],
    "features": [
      "Determinate Finite State Machines",
      "Nondeterminate Finite State Machines",
      "NFA to DFA conversion",
      "State machine simplification",
      "Graphviz rendering of state machine diagrams"
    ],
    "paragraphs": [
      "My 2022 Summer 2 semester courses include Theory of Computation, where one of the topics covered is state machines/automata. I'm learning about determinate and nondeterminate finite state automata, pushdown automata, and Turing machines.",

      "This project is to put into implementation some of the concepts I've learned about, including NFA to DFA conversion, state machine unions, and regular expression equivalency."
    ],
    "gallery": [
      {
        "type": "image",
        "description": "Instantiating an NFA, then converting it to an equivalent DFA",
        "link": "https://drive.google.com/file/d/1QMB-Dw8Lf-U1raDzSS_p_09l71cFe7V2/view?usp=sharing"
      }, {
        "type": "image",
        "description": "The NFA produced and rendered by the code in the previous slide",
        "link": "https://drive.google.com/file/d/1C3buexJpl88BUvV1sMR7vK5Mr4xXAiP4/view?usp=sharing"
      }, {
        "type": "image",
        "description": "The DFA produced from running '.to_dfa()' on the NFA",
        "link": "https://drive.google.com/file/d/1PUpvptGBBxC7oxMV2jympMRiGiOhVyT7/view?usp=sharing"
      }
    ]
  }
]